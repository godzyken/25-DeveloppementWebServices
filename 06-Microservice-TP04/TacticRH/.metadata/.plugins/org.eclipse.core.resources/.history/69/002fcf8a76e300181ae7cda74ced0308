package fr.tacticrh.utilisateur.web.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import fr.tacticrh.utilisateur.business.service.PersonneService;
import fr.tacticrh.utilisateur.business.service.UtilisateurService;
import fr.tacticrh.utilisateur.persistence.model.Personne;
import fr.tacticrh.utilisateur.persistence.model.Utilisateur;


/**
 * <b>CLASSE IMPLEMENTANT LES FONCTIONNALITES SUIVANTES :</b><br/>
 *    -->LES FONCTIONNALITES DE NAVIGATION ET DE RECEPTION DE REQUETE HTTP.<br/>
 *    -->TYPE D'ENTITE CONCERNEE : 'Personne'
 *    <br/>
 */
@RestController
public class PersonneControllerImpl implements UtilisateurController {

	
	private static final Logger LOGGER = LoggerFactory.getLogger(PersonneControllerImpl.class);

	/**
	 * <b>COMPOSANT METIER RELATIF A L'ENTITE CI-DESSOUS :</b><br/>
	 * <br/>
	 * ->ENTITE : 'Personne'.<br/> 
	 */    
    @Autowired
    PersonneService personneService;


	@Override
	@RequestMapping(value="/personne", method= RequestMethod.POST)
    public Personne enregistrer(@RequestBody Utilisateur pUtilisateur) {
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : enregistrer -- BEGIN");
		
		Personne personneEnregistree = this.personneService.enregistrer(pUtilisateur);
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : enregistrer -- END");
		return utilisateurEnregistre;
	}

	@Override
	@RequestMapping(value="/personne", method= RequestMethod.GET)
    public List<Utilisateur> rechercherTous() {
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : rechercherTous -- BEGIN");
		
		List<Personne> personnesTrouvees = this.personneService.rechercherTous();
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : rechercherTous -- END");
		return utilisateursTrouves;
	}
	
	@Override
	@RequestMapping(value="/utilisateur/{id}", method= RequestMethod.GET)
    public Personne rechercherParId(@PathVariable("id") long pId) {
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : rechercherParId -- BEGIN");
		
		Personne personneTrouvee = this.personneService.rechercherParId(pId);
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : rechercherParId -- END");
		return utilisateurTrouve;
	}

	@Override
	@RequestMapping(value="/personne", method= RequestMethod.PATCH)
    public Personne modifierParId(@RequestBody Utilisateur pUtilisateur) {
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : modifierParId -- BEGIN");
		
		Personne personneModifiee = this.personneService.modifierParId(pUtilisateur);
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : modifierParId -- END");
		return utilisateurModifie;
	}
	
	@Override
	@RequestMapping(value="/personne", method= RequestMethod.DELETE)
	public void supprimerParId(long pId) {
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : supprimerParId -- BEGIN");
		
		this.personneService.supprimerParId(pId);
		
		LOGGER.info("CLASS : " + this.getClass().getSimpleName() + " -- METHOD : supprimerParId -- END");
		return;
	}
}
